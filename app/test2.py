import streamlit as st
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
import numpy as np
from androguard import apk
import requests

# Load ML models and datasets
df_trn = pd.read_csv('Permissions_training_dataset.csv')
df_tsn = pd.read_csv('Permissions_testing_dataset.csv')

clf_knn = KNeighborsClassifier()
clf_knn.fit(X_train, y_train)

clf_svm = SVC(kernel='linear')
clf_svm.fit(X_train, y_train)

clf_dt = DecisionTreeClassifier()
clf_dt.fit(X_train, y_train)

clf_rf = RandomForestClassifier()
clf_rf.fit(X_train, y_train)

def perm_detect(apkfile):
    
    a = apk.APK(apkfile)
    perms = a.get_permissions()

    permissions = []

    for perm in perms:
        s_parts = perm.split('.')
        perm_part = s_parts[-1]
        permissions.append(perm_part)
        
    sample = []

    permission_features = ['ACCEPT_HANDOVER', 'ACCESS_BACKGROUND_LOCATION', 'ACCESS_CHECKIN_PROPERTIES', 'ACCESS_COARSE_LOCATION', 'ACCESS_FINE_LOCATION', 'ACCESS_LOCATION_EXTRA_COMMANDS', 'ACCESS_MEDIA_LOCATION', 'ACCESS_NETWORK_STATE', 'ACCESS_NOTIFICATION_POLICY', 'ACCESS_WIFI_STATE', 'ACCOUNT_MANAGER', 'ACTIVITY_RECOGNITION', 'ADD_VOICEMAIL', 'ANSWER_PHONE_CALLS', 'BATTERY_STATS', 'BIND_ACCESSIBILITY_SERVICE', 'BIND_APPWIDGET', 'BIND_AUTOFILL_SERVICE', 'BIND_CALL_REDIRECTION_SERVICE', 'BIND_CARRIER_MESSAGING_CLIENT_SERVICE', 'BIND_CARRIER_MESSAGING_SERVICE', 'BIND_CARRIER_SERVICES', 'BIND_CHOOSER_TARGET_SERVICE', 'BIND_CONDITION_PROVIDER_SERVICE', 'BIND_CONTROLS', 'BIND_DEVICE_ADMIN', 'BIND_DREAM_SERVICE', 'BIND_INCALL_SERVICE', 'BIND_INPUT_METHOD', 'BIND_MIDI_DEVICE_SERVICE', 'BIND_NFC_SERVICE', 'BIND_NOTIFICATION_LISTENER_SERVICE', 'BIND_PRINT_SERVICE', 'BIND_QUICK_ACCESS_WALLET_SERVICE', 'BIND_QUICK_SETTINGS_TILE', 'BIND_REMOTEVIEWS', 'BIND_SCREENING_SERVICE', 'BIND_TELECOM_CONNECTION_SERVICE', 'BIND_TEXT_SERVICE', 'BIND_TV_INPUT', 'BIND_VISUAL_VOICEMAIL_SERVICE', 'BIND_VOICE_INTERACTION', 'BIND_VPN_SERVICE', 'BIND_VR_LISTENER_SERVICE', 'BIND_WALLPAPER', 'BLUETOOTH', 'BLUETOOTH_ADMIN', 'BLUETOOTH_PRIVILEGED', 'BODY_SENSORS', 'BROADCAST_PACKAGE_REMOVED', 'BROADCAST_SMS', 'BROADCAST_STICKY', 'BROADCAST_WAP_PUSH', 'CALL_COMPANION_APP', 'CALL_PHONE', 'CALL_PRIVILEGED', 'CAMERA', 'CAPTURE_AUDIO_OUTPUT', 'CHANGE_COMPONENT_ENABLED_STATE', 'CHANGE_CONFIGURATION', 'CHANGE_NETWORK_STATE', 'CHANGE_WIFI_MULTICAST_STATE', 'CHANGE_WIFI_STATE', 'CLEAR_APP_CACHE', 'CONTROL_LOCATION_UPDATES', 'DELETE_CACHE_FILES', 'DELETE_PACKAGES', 'DIAGNOSTIC', 'DISABLE_KEYGUARD', 'DUMP', 'EXPAND_STATUS_BAR', 'FACTORY_TEST', 'FOREGROUND_SERVICE', 'GET_ACCOUNTS', 'GET_ACCOUNTS_PRIVILEGED', 'GET_PACKAGE_SIZE', 'GET_TASKS', 'GLOBAL_SEARCH', 'INSTALL_LOCATION_PROVIDER', 'INSTALL_PACKAGES', 'INSTALL_SHORTCUT', 'INSTANT_APP_FOREGROUND_SERVICE', 'INTERACT_ACROSS_PROFILES', 'INTERNET', 'KILL_BACKGROUND_PROCESSES', 'LOADER_USAGE_STATS', 'LOCATION_HARDWARE', 'MANAGE_DOCUMENTS', 'MANAGE_EXTERNAL_STORAGE', 'MANAGE_OWN_CALLS', 'MASTER_CLEAR', 'MEDIA_CONTENT_CONTROL', 'MODIFY_AUDIO_SETTINGS', 'MODIFY_PHONE_STATE', 'MOUNT_FORMAT_FILESYSTEMS', 'MOUNT_UNMOUNT_FILESYSTEMS', 'NFC', 'NFC_PREFERRED_PAYMENT_INFO', 'NFC_TRANSACTION_EVENT', 'PACKAGE_USAGE_STATS', 'PERSISTENT_ACTIVITY', 'PROCESS_OUTGOING_CALLS', 'QUERY_ALL_PACKAGES', 'READ_CALENDAR', 'READ_CALL_LOG', 'READ_CONTACTS', 'READ_EXTERNAL_STORAGE', 'READ_INPUT_STATE', 'READ_LOGS', 'READ_PHONE_NUMBERS', 'READ_PHONE_STATE', 'READ_PRECISE_PHONE_STATE', 'READ_SMS', 'READ_SYNC_SETTINGS', 'READ_SYNC_STATS', 'READ_VOICEMAIL', 'REBOOT', 'RECEIVE_BOOT_COMPLETED', 'RECEIVE_MMS', 'RECEIVE_SMS', 'RECEIVE_WAP_PUSH', 'RECORD_AUDIO', 'REORDER_TASKS', 'REQUEST_COMPANION_RUN_IN_BACKGROUND', 'REQUEST_COMPANION_USE_DATA_IN_BACKGROUND', 'REQUEST_DELETE_PACKAGES', 'REQUEST_IGNORE_BATTERY_OPTIMIZATIONS', 'REQUEST_INSTALL_PACKAGES', 'REQUEST_PASSWORD_COMPLEXITY', 'RESTART_PACKAGES', 'SEND_RESPOND_VIA_MESSAGE', 'SEND_SMS', 'SET_ALARM', 'SET_ALWAYS_FINISH', 'SET_ANIMATION_SCALE', 'SET_DEBUG_APP', 'SET_PREFERRED_APPLICATIONS', 'SET_PROCESS_LIMIT', 'SET_TIME', 'SET_TIME_ZONE', 'SET_WALLPAPER', 'SET_WALLPAPER_HINTS', 'SIGNAL_PERSISTENT_PROCESSES', 'SMS_FINANCIAL_TRANSACTIONS', 'START_VIEW_PERMISSION_USAGE', 'STATUS_BAR', 'SYSTEM_ALERT_WINDOW', 'TRANSMIT_IR', 'UNINSTALL_SHORTCUT', 'UPDATE_DEVICE_STATS', 'USE_BIOMETRIC', 'USE_FINGERPRINT', 'USE_FULL_SCREEN_INTENT', 'USE_SIP', 'VIBRATE', 'WAKE_LOCK', 'WRITE_APN_SETTINGS', 'WRITE_CALENDAR', 'WRITE_CALL_LOG', 'WRITE_CONTACTS', 'WRITE_EXTERNAL_STORAGE', 'WRITE_GSERVICES', 'WRITE_SECURE_SETTINGS', 'WRITE_SETTINGS', 'WRITE_SYNC_SETTINGS', 'WRITE_VOICEMAIL']

    for p in permission_features:
        if p in permissions:
            sample.append(1)
        else:
            sample.append(0)

    sample = np.array([sample])

    predict_ml = clf_rf.predict(sample)

    if predict_ml == 1:
        print("the application seems to be malicious! Be careful!!")
    else:
        print("the application seems to be safe!")

# Sidebar
st.sidebar.header("Detection Method")
method = st.sidebar.radio("Select the detection method", ("Machine Learning", "VirusTotal"))

if method == "Machine Learning":
    st.sidebar.header("Machine Learning Model")
    model = st.sidebar.selectbox("Select the ML Model", ("K-Nearest Neighbors", "Support Vector Machine", "Decision Tree", "Random Forest"))

# Main Content
st.title("APK Malware Detector")

uploaded_file = st.file_uploader("Upload an APK file", type=["apk"])

if uploaded_file is not None:
    # Save the uploaded APK file to a temporary location
    temp_dir = tempfile.TemporaryDirectory()
    apk_path = os.path.join(temp_dir.name, "uploaded.apk")
    with open(apk_path, "wb") as f:
        f.write(uploaded_file.getvalue())

    if method == "Machine Learning":
        # Feature extraction
        a = apk.APK(apk_path)
        perms = a.get_permissions()
        permissions = []

        for perm in perms:
            s_parts = perm.split('.')
            perm_part = s_parts[-1]
            permissions.append(perm_part)

        sample = []

        permission_features = ['ACCEPT_HANDOVER', 'ACCESS_BACKGROUND_LOCATION', 'ACCESS_CHECKIN_PROPERTIES', 'ACCESS_COARSE_LOCATION', 'ACCESS_FINE_LOCATION', 'ACCESS_LOCATION_EXTRA_COMMANDS', 'ACCESS_MEDIA_LOCATION', 'ACCESS_NETWORK_STATE', 'ACCESS_NOTIFICATION_POLICY', 'ACCESS_WIFI_STATE', 'ACCOUNT_MANAGER', 'ACTIVITY_RECOGNITION', 'ADD_VOICEMAIL', 'ANSWER_PHONE_CALLS', 'BATTERY_STATS', 'BIND_ACCESSIBILITY_SERVICE', 'BIND_APPWIDGET', 'BIND_AUTOFILL_SERVICE', 'BIND_CALL_REDIRECTION_SERVICE', 'BIND_CARRIER_MESSAGING_CLIENT_SERVICE', 'BIND_CARRIER_MESSAGING_SERVICE', 'BIND_CARRIER_SERVICES', 'BIND_CHOOSER_TARGET_SERVICE', 'BIND_CONDITION_PROVIDER_SERVICE', 'BIND_CONTROLS', 'BIND_DEVICE_ADMIN', 'BIND_DREAM_SERVICE', 'BIND_INCALL_SERVICE', 'BIND_INPUT_METHOD', 'BIND_MIDI_DEVICE_SERVICE', 'BIND_NFC_SERVICE', 'BIND_NOTIFICATION_LISTENER_SERVICE', 'BIND_PRINT_SERVICE', 'BIND_QUICK_ACCESS_WALLET_SERVICE', 'BIND_QUICK_SETTINGS_TILE', 'BIND_REMOTEVIEWS', 'BIND_SCREENING_SERVICE', 'BIND_TELECOM_CONNECTION_SERVICE', 'BIND_TEXT_SERVICE', 'BIND_TV_INPUT', 'BIND_VISUAL_VOICEMAIL_SERVICE', 'BIND_VOICE_INTERACTION', 'BIND_VPN_SERVICE', 'BIND_VR_LISTENER_SERVICE', 'BIND_WALLPAPER', 'BLUETOOTH', 'BLUETOOTH_ADMIN', 'BLUETOOTH_PRIVILEGED', 'BODY_SENSORS', 'BROADCAST_PACKAGE_REMOVED', 'BROADCAST_SMS', 'BROADCAST_STICKY', 'BROADCAST_WAP_PUSH', 'CALL_COMPANION_APP', 'CALL_PHONE', 'CALL_PRIVILEGED', 'CAMERA', 'CAPTURE_AUDIO_OUTPUT', 'CHANGE_COMPONENT_ENABLED_STATE', 'CHANGE_CONFIGURATION', 'CHANGE_NETWORK_STATE', 'CHANGE_WIFI_MULTICAST_STATE', 'CHANGE_WIFI_STATE', 'CLEAR_APP_CACHE', 'CONTROL_LOCATION_UPDATES', 'DELETE_CACHE_FILES', 'DELETE_PACKAGES', 'DIAGNOSTIC', 'DISABLE_KEYGUARD', 'DUMP', 'EXPAND_STATUS_BAR', 'FACTORY_TEST', 'FOREGROUND_SERVICE', 'GET_ACCOUNTS', 'GET_ACCOUNTS_PRIVILEGED', 'GET_PACKAGE_SIZE', 'GET_TASKS', 'GLOBAL_SEARCH', 'INSTALL_LOCATION_PROVIDER', 'INSTALL_PACKAGES', 'INSTALL_SHORTCUT', 'INSTANT_APP_FOREGROUND_SERVICE', 'INTERACT_ACROSS_PROFILES', 'INTERNET', 'KILL_BACKGROUND_PROCESSES', 'LOADER_USAGE_STATS', 'LOCATION_HARDWARE', 'MANAGE_DOCUMENTS', 'MANAGE_EXTERNAL_STORAGE', 'MANAGE_OWN_CALLS', 'MASTER_CLEAR', 'MEDIA_CONTENT_CONTROL', 'MODIFY_AUDIO_SETTINGS', 'MODIFY_PHONE_STATE', 'MOUNT_FORMAT_FILESYSTEMS', 'MOUNT_UNMOUNT_FILESYSTEMS', 'NFC', 'NFC_PREFERRED_PAYMENT_INFO', 'NFC_TRANSACTION_EVENT', 'PACKAGE_USAGE_STATS', 'PERSISTENT_ACTIVITY', 'PROCESS_OUTGOING_CALLS', 'QUERY_ALL_PACKAGES', 'READ_CALENDAR', 'READ_CALL_LOG', 'READ_CONTACTS', 'READ_EXTERNAL_STORAGE', 'READ_INPUT_STATE', 'READ_LOGS', 'READ_PHONE_NUMBERS', 'READ_PHONE_STATE', 'READ_PRECISE_PHONE_STATE', 'READ_SMS', 'READ_SYNC_SETTINGS', 'READ_SYNC_STATS', 'READ_VOICEMAIL', 'REBOOT', 'RECEIVE_BOOT_COMPLETED', 'RECEIVE_MMS', 'RECEIVE_SMS', 'RECEIVE_WAP_PUSH', 'RECORD_AUDIO', 'REORDER_TASKS', 'REQUEST_COMPANION_RUN_IN_BACKGROUND', 'REQUEST_COMPANION_USE_DATA_IN_BACKGROUND', 'REQUEST_DELETE_PACKAGES', 'REQUEST_IGNORE_BATTERY_OPTIMIZATIONS', 'REQUEST_INSTALL_PACKAGES', 'REQUEST_PASSWORD_COMPLEXITY', 'RESTART_PACKAGES', 'SEND_RESPOND_VIA_MESSAGE', 'SEND_SMS', 'SET_ALARM', 'SET_ALWAYS_FINISH', 'SET_ANIMATION_SCALE', 'SET_DEBUG_APP', 'SET_PREFERRED_APPLICATIONS', 'SET_PROCESS_LIMIT', 'SET_TIME', 'SET_TIME_ZONE', 'SET_WALLPAPER', 'SET_WALLPAPER_HINTS', 'SIGNAL_PERSISTENT_PROCESSES', 'SMS_FINANCIAL_TRANSACTIONS', 'START_VIEW_PERMISSION_USAGE', 'STATUS_BAR', 'SYSTEM_ALERT_WINDOW', 'TRANSMIT_IR', 'UNINSTALL_SHORTCUT', 'UPDATE_DEVICE_STATS', 'USE_BIOMETRIC', 'USE_FINGERPRINT', 'USE_FULL_SCREEN_INTENT', 'USE_SIP', 'VIBRATE', 'WAKE_LOCK', 'WRITE_APN_SETTINGS', 'WRITE_CALENDAR', 'WRITE_CALL_LOG', 'WRITE_CONTACTS', 'WRITE_EXTERNAL_STORAGE', 'WRITE_GSERVICES', 'WRITE_SECURE_SETTINGS', 'WRITE_SETTINGS', 'WRITE_SYNC_SETTINGS', 'WRITE_VOICEMAIL']

        for p in permission_features:
            if p in permissions:
                sample.append(1)
            else:
                sample.append(0)

        sample = np.array([sample])

        if model == "K-Nearest Neighbors":
            predict_ml = clf_knn.predict(sample)
        elif model == "Support Vector Machine":
            predict_ml = clf_svm.predict(sample)
        elif model == "Decision Tree":
            predict_ml = clf_dt.predict(sample)
        elif model == "Random Forest":
            predict_ml = clf_rf.predict(sample)

        if predict_ml == 1:
            result = "The application seems to be malicious! Be careful!"
        else:
            result = "The application seems to be safe!"

    return result


# Streamlit app code
import streamlit as st

# Function to upload APK file
def upload_apk():
    uploaded_file = st.file_uploader("Upload APK file", type=["apk"])
    if uploaded_file is not None:
        return uploaded_file
    else:
        return None

# Function to display ML model options
def select_model():
    models = ["K-Nearest Neighbors", "Support Vector Machine", "Decision Tree", "Random Forest"]
    selected_model = st.selectbox("Select the ML model", models)
    return selected_model

# Function to perform detection using ML model
def ml_detection(apk_file, model):
    result = perm_detect(apk_file, model)
    st.write(result)
# Replace 'YOUR_API_KEY' with your actual VirusTotal API key
api_key = '8a32e4998289a927f41c2da0d4160b558e71c37211a39301297d4562e40a9661'

# Example API request to scan an APK file
def scan_apk(uploaded_file):
    url = 'https://www.virustotal.com/vtapi/v2/file/scan'
    params = {'apikey': api_key}

    files = {'file': uploaded_file}
    response = requests.post(url, files=files, params=params)
    return response.json()


# Function to perform detection using VirusTotal API
def api_detection(apk_file):
    response = scan_apk(apk_file)
    scan_id = response['scan_id']

    if response['response_code'] == 1:
        st.write("Scan request submitted successfully.")

        report_url = f"https://www.virustotal.com/vtapi/v2/file/report?apikey={api_key}&resource={scan_id}"
        report_response = requests.get(report_url).json()

        if report_response['response_code'] == 1:
            positives = report_response['positives']
            total = report_response['total']

            if positives > 0:
                st.write(f"The file is flagged as malware. Detection ratio: {positives}/{total}")
            else:
                st.write("The file is not flagged as malware.")
        else:
            st.write("Scan report not available yet. Please check back later.")
    else:
        st.write("Scan request failed. Please try again.")

# Main Streamlit app
def main():
    st.title("APK Malware Detection")

    option = st.selectbox("Choose detection method", ("Machine Learning", "VirusTotal API"))

    if option == "Machine Learning":
        model = select_model()
        apk_file = upload_apk()

        if apk_file:
            ml_detection(apk_file, model)

    if option == "VirusTotal API":
        apk_file = upload_apk()

    if apk_file:
        response = scan_apk(apk_file)

        st.subheader("VirusTotal Detection")

        # Check if the scan request was successful
        if response['response_code'] == 1:
            st.write("Scan request submitted successfully.")

            # Wait for the scan to complete
            scan_id = response['scan_id']
            report_url = f"https://www.virustotal.com/vtapi/v2/file/report?apikey={api_key}&resource={scan_id}"
            report_response = requests.get(report_url).json()

            # Check if the report is available
            if report_response['response_code'] == 1:
                positives = report_response['positives']
                total = report_response['total']

                if positives > 0:
                    st.write(f"The file is flagged as malware. Detection ratio: {positives}/{total}")
                else:
                    st.write("The file is not flagged as malware.")
            else:
                st.write("Scan report not available yet. Please check back later.")
        else:
            st.write("Scan request failed. Please try again.")



if __name__ == '__main__':
    main()
