#test
import streamlit as st
import pandas as pd
import csv

import androguard.core.bytecodes.apk as apk
import numpy as np
import os

from sklearn.linear_model import *
from sklearn.tree import *
from sklearn.neighbors import *
from sklearn.ensemble import *
from sklearn.svm import *
from sklearn.metrics import confusion_matrix

# Helper Functions
def extract_permissions(apk_file):
    a = apk.APK(apk_file)
    perms = a.get_permissions()
    permissions = []

    for perm in perms:
        s_parts = perm.split('.')
        perm_part = s_parts[-1]
        permissions.append(perm_part)

    return permissions

def check_apk_malware(api_key, apk_file):
    url = 'https://www.virustotal.com/vtapi/v2/file/scan'
    params = {'apikey': api_key}

    with open(apk_file, 'rb') as file:
        files = {'file': file}
        response = requests.post(url, files=files, params=params)

    if response.status_code == 200:
        scan_id = response.json()['scan_id']
        report_url = f"https://www.virustotal.com/vtapi/v2/file/report?apikey={api_key}&resource={scan_id}"
        report_response = requests.get(report_url).json()

        if report_response['response_code'] == 1:
            if report_response['positives'] > 0:
                return True  # Malware detected
            else:
                return False  # Not detected as malware
        else:
            return None  # Scan not completed yet
    else:
        return None  # Error occurred during the scan

df_trn = pd.read_csv('Permissions_training_dataset.csv')
df_tsn = pd.read_csv('Permissions_testing_dataset.csv')

perms = ['ACCEPT_HANDOVER', 'ACCESS_BACKGROUND_LOCATION', 'ACCESS_CHECKIN_PROPERTIES', 'ACCESS_COARSE_LOCATION', 'ACCESS_FINE_LOCATION', 'ACCESS_LOCATION_EXTRA_COMMANDS', 'ACCESS_MEDIA_LOCATION', 'ACCESS_NETWORK_STATE', 'ACCESS_NOTIFICATION_POLICY', 'ACCESS_WIFI_STATE', 'ACCOUNT_MANAGER', 'ACTIVITY_RECOGNITION', 'ADD_VOICEMAIL', 'ANSWER_PHONE_CALLS', 'BATTERY_STATS', 'BIND_ACCESSIBILITY_SERVICE', 'BIND_APPWIDGET', 'BIND_AUTOFILL_SERVICE', 'BIND_CALL_REDIRECTION_SERVICE', 'BIND_CARRIER_MESSAGING_CLIENT_SERVICE', 'BIND_CARRIER_MESSAGING_SERVICE', 'BIND_CARRIER_SERVICES', 'BIND_CHOOSER_TARGET_SERVICE', 'BIND_CONDITION_PROVIDER_SERVICE', 'BIND_CONTROLS', 'BIND_DEVICE_ADMIN', 'BIND_DREAM_SERVICE', 'BIND_INCALL_SERVICE', 'BIND_INPUT_METHOD', 'BIND_MIDI_DEVICE_SERVICE', 'BIND_NFC_SERVICE', 'BIND_NOTIFICATION_LISTENER_SERVICE', 'BIND_PRINT_SERVICE', 'BIND_QUICK_ACCESS_WALLET_SERVICE', 'BIND_QUICK_SETTINGS_TILE', 'BIND_REMOTEVIEWS', 'BIND_SCREENING_SERVICE', 'BIND_TELECOM_CONNECTION_SERVICE', 'BIND_TEXT_SERVICE', 'BIND_TV_INPUT', 'BIND_VISUAL_VOICEMAIL_SERVICE', 'BIND_VOICE_INTERACTION', 'BIND_VPN_SERVICE', 'BIND_VR_LISTENER_SERVICE', 'BIND_WALLPAPER', 'BLUETOOTH', 'BLUETOOTH_ADMIN', 'BLUETOOTH_PRIVILEGED', 'BODY_SENSORS', 'BROADCAST_PACKAGE_REMOVED', 'BROADCAST_SMS', 'BROADCAST_STICKY', 'BROADCAST_WAP_PUSH', 'CALL_COMPANION_APP', 'CALL_PHONE', 'CALL_PRIVILEGED', 'CAMERA', 'CAPTURE_AUDIO_OUTPUT', 'CHANGE_COMPONENT_ENABLED_STATE', 'CHANGE_CONFIGURATION', 'CHANGE_NETWORK_STATE', 'CHANGE_WIFI_MULTICAST_STATE', 'CHANGE_WIFI_STATE', 'CLEAR_APP_CACHE', 'CONTROL_LOCATION_UPDATES', 'DELETE_CACHE_FILES', 'DELETE_PACKAGES', 'DIAGNOSTIC', 'DISABLE_KEYGUARD', 'DUMP', 'EXPAND_STATUS_BAR', 'FACTORY_TEST', 'FOREGROUND_SERVICE', 'GET_ACCOUNTS', 'GET_ACCOUNTS_PRIVILEGED', 'GET_PACKAGE_SIZE', 'GET_TASKS', 'GLOBAL_SEARCH', 'INSTALL_LOCATION_PROVIDER', 'INSTALL_PACKAGES', 'INSTALL_SHORTCUT', 'INSTANT_APP_FOREGROUND_SERVICE', 'INTERACT_ACROSS_PROFILES', 'INTERNET', 'KILL_BACKGROUND_PROCESSES', 'LOADER_USAGE_STATS', 'LOCATION_HARDWARE', 'MANAGE_DOCUMENTS', 'MANAGE_EXTERNAL_STORAGE', 'MANAGE_OWN_CALLS', 'MASTER_CLEAR', 'MEDIA_CONTENT_CONTROL', 'MODIFY_AUDIO_SETTINGS', 'MODIFY_PHONE_STATE', 'MOUNT_FORMAT_FILESYSTEMS', 'MOUNT_UNMOUNT_FILESYSTEMS', 'NFC', 'NFC_PREFERRED_PAYMENT_INFO', 'NFC_TRANSACTION_EVENT', 'PACKAGE_USAGE_STATS', 'PERSISTENT_ACTIVITY', 'PROCESS_OUTGOING_CALLS', 'QUERY_ALL_PACKAGES', 'READ_CALENDAR', 'READ_CALL_LOG', 'READ_CONTACTS', 'READ_EXTERNAL_STORAGE', 'READ_INPUT_STATE', 'READ_LOGS', 'READ_PHONE_NUMBERS', 'READ_PHONE_STATE', 'READ_PRECISE_PHONE_STATE', 'READ_SMS', 'READ_SYNC_SETTINGS', 'READ_SYNC_STATS', 'READ_VOICEMAIL', 'REBOOT', 'RECEIVE_BOOT_COMPLETED', 'RECEIVE_MMS', 'RECEIVE_SMS', 'RECEIVE_WAP_PUSH', 'RECORD_AUDIO', 'REORDER_TASKS', 'REQUEST_COMPANION_RUN_IN_BACKGROUND', 'REQUEST_COMPANION_USE_DATA_IN_BACKGROUND', 'REQUEST_DELETE_PACKAGES', 'REQUEST_IGNORE_BATTERY_OPTIMIZATIONS', 'REQUEST_INSTALL_PACKAGES', 'REQUEST_PASSWORD_COMPLEXITY', 'RESTART_PACKAGES', 'SEND_RESPOND_VIA_MESSAGE', 'SEND_SMS', 'SET_ALARM', 'SET_ALWAYS_FINISH', 'SET_ANIMATION_SCALE', 'SET_DEBUG_APP', 'SET_PREFERRED_APPLICATIONS', 'SET_PROCESS_LIMIT', 'SET_TIME', 'SET_TIME_ZONE', 'SET_WALLPAPER', 'SET_WALLPAPER_HINTS', 'SIGNAL_PERSISTENT_PROCESSES', 'SMS_FINANCIAL_TRANSACTIONS', 'START_VIEW_PERMISSION_USAGE', 'STATUS_BAR', 'SYSTEM_ALERT_WINDOW', 'TRANSMIT_IR', 'UNINSTALL_SHORTCUT', 'UPDATE_DEVICE_STATS', 'USE_BIOMETRIC', 'USE_FINGERPRINT', 'USE_FULL_SCREEN_INTENT', 'USE_SIP', 'VIBRATE', 'WAKE_LOCK', 'WRITE_APN_SETTINGS', 'WRITE_CALENDAR', 'WRITE_CALL_LOG', 'WRITE_CONTACTS', 'WRITE_EXTERNAL_STORAGE', 'WRITE_GSERVICES', 'WRITE_SECURE_SETTINGS', 'WRITE_SETTINGS', 'WRITE_SYNC_SETTINGS', 'WRITE_VOICEMAIL', 'Malware']

df_trn = df_trn.filter(perms)
df_tsn = df_tsn.filter(perms)

df_trn.head()

X_train = df_trn.drop('Malware', axis=1)
y_train = df_trn['Malware']

X_test = df_tsn.drop('Malware', axis=1)
y_test = df_tsn['Malware']

clf_knn = KNeighborsClassifier()
clf_knn.fit(X_train, y_train)

clf_svm = SVC(kernel='linear')
clf_svm.fit(X_train, y_train)

clf_dt = DecisionTreeClassifier()
clf_dt.fit(X_train, y_train)

clf_rf = RandomForestClassifier()
clf_rf.fit(X_train, y_train)

def perm_detect(apkfile):
    a = apk.APK(apkfile)
    perms = a.get_permissions()

    permissions = []

    for perm in perms:
        s_parts = perm.split('.')
        perm_part = s_parts[-1]
        permissions.append(perm_part)

    sample = []

    permission_features = ['ACCEPT_HANDOVER', 'ACCESS_BACKGROUND_LOCATION', 'ACCESS_CHECKIN_PROPERTIES', 'ACCESS_COARSE_LOCATION', 'ACCESS_FINE_LOCATION', 'ACCESS_LOCATION_EXTRA_COMMANDS', 'ACCESS_MEDIA_LOCATION', 'ACCESS_NETWORK_STATE', 'ACCESS_NOTIFICATION_POLICY', 'ACCESS_WIFI_STATE', 'ACCOUNT_MANAGER', 'ACTIVITY_RECOGNITION', 'ADD_VOICEMAIL', 'ANSWER_PHONE_CALLS', 'BATTERY_STATS', 'BIND_ACCESSIBILITY_SERVICE', 'BIND_APPWIDGET', 'BIND_AUTOFILL_SERVICE', 'BIND_CALL_REDIRECTION_SERVICE', 'BIND_CARRIER_MESSAGING_CLIENT_SERVICE', 'BIND_CARRIER_MESSAGING_SERVICE', 'BIND_CARRIER_SERVICES', 'BIND_CHOOSER_TARGET_SERVICE', 'BIND_CONDITION_PROVIDER_SERVICE', 'BIND_CONTROLS', 'BIND_DEVICE_ADMIN', 'BIND_DREAM_SERVICE', 'BIND_INCALL_SERVICE', 'BIND_INPUT_METHOD', 'BIND_MIDI_DEVICE_SERVICE', 'BIND_NFC_SERVICE', 'BIND_NOTIFICATION_LISTENER_SERVICE', 'BIND_PRINT_SERVICE', 'BIND_QUICK_ACCESS_WALLET_SERVICE', 'BIND_QUICK_SETTINGS_TILE', 'BIND_REMOTEVIEWS', 'BIND_SCREENING_SERVICE', 'BIND_TELECOM_CONNECTION_SERVICE', 'BIND_TEXT_SERVICE', 'BIND_TV_INPUT', 'BIND_VISUAL_VOICEMAIL_SERVICE', 'BIND_VOICE_INTERACTION', 'BIND_VPN_SERVICE', 'BIND_VR_LISTENER_SERVICE', 'BIND_WALLPAPER', 'BLUETOOTH', 'BLUETOOTH_ADMIN', 'BLUETOOTH_PRIVILEGED', 'BODY_SENSORS', 'BROADCAST_PACKAGE_REMOVED', 'BROADCAST_SMS', 'BROADCAST_STICKY', 'BROADCAST_WAP_PUSH', 'CALL_COMPANION_APP', 'CALL_PHONE', 'CALL_PRIVILEGED', 'CAMERA', 'CAPTURE_AUDIO_OUTPUT', 'CHANGE_COMPONENT_ENABLED_STATE', 'CHANGE_CONFIGURATION', 'CHANGE_NETWORK_STATE', 'CHANGE_WIFI_MULTICAST_STATE', 'CHANGE_WIFI_STATE', 'CLEAR_APP_CACHE', 'CONTROL_LOCATION_UPDATES', 'DELETE_CACHE_FILES', 'DELETE_PACKAGES', 'DIAGNOSTIC', 'DISABLE_KEYGUARD', 'DUMP', 'EXPAND_STATUS_BAR', 'FACTORY_TEST', 'FOREGROUND_SERVICE', 'GET_ACCOUNTS', 'GET_ACCOUNTS_PRIVILEGED', 'GET_PACKAGE_SIZE', 'GET_TASKS', 'GLOBAL_SEARCH', 'INSTALL_LOCATION_PROVIDER', 'INSTALL_PACKAGES', 'INSTALL_SHORTCUT', 'INSTANT_APP_FOREGROUND_SERVICE', 'INTERACT_ACROSS_PROFILES', 'INTERNET', 'KILL_BACKGROUND_PROCESSES', 'LOADER_USAGE_STATS', 'LOCATION_HARDWARE', 'MANAGE_DOCUMENTS', 'MANAGE_EXTERNAL_STORAGE', 'MANAGE_OWN_CALLS', 'MASTER_CLEAR', 'MEDIA_CONTENT_CONTROL', 'MODIFY_AUDIO_SETTINGS', 'MODIFY_PHONE_STATE', 'MOUNT_FORMAT_FILESYSTEMS', 'MOUNT_UNMOUNT_FILESYSTEMS', 'NFC', 'NFC_PREFERRED_PAYMENT_INFO', 'NFC_TRANSACTION_EVENT', 'PACKAGE_USAGE_STATS', 'PERSISTENT_ACTIVITY', 'PROCESS_OUTGOING_CALLS', 'QUERY_ALL_PACKAGES', 'READ_CALENDAR', 'READ_CALL_LOG', 'READ_CONTACTS', 'READ_EXTERNAL_STORAGE', 'READ_INPUT_STATE', 'READ_LOGS', 'READ_PHONE_NUMBERS', 'READ_PHONE_STATE', 'READ_PRECISE_PHONE_STATE', 'READ_SMS', 'READ_SYNC_SETTINGS', 'READ_SYNC_STATS', 'READ_VOICEMAIL', 'REBOOT', 'RECEIVE_BOOT_COMPLETED', 'RECEIVE_MMS', 'RECEIVE_SMS', 'RECEIVE_WAP_PUSH', 'RECORD_AUDIO', 'REORDER_TASKS', 'REQUEST_COMPANION_RUN_IN_BACKGROUND', 'REQUEST_COMPANION_USE_DATA_IN_BACKGROUND', 'REQUEST_DELETE_PACKAGES', 'REQUEST_IGNORE_BATTERY_OPTIMIZATIONS', 'REQUEST_INSTALL_PACKAGES', 'REQUEST_PASSWORD_COMPLEXITY', 'RESTART_PACKAGES', 'SEND_RESPOND_VIA_MESSAGE', 'SEND_SMS', 'SET_ALARM', 'SET_ALWAYS_FINISH', 'SET_ANIMATION_SCALE', 'SET_DEBUG_APP', 'SET_PREFERRED_APPLICATIONS', 'SET_PROCESS_LIMIT', 'SET_TIME', 'SET_TIME_ZONE', 'SET_WALLPAPER', 'SET_WALLPAPER_HINTS', 'SIGNAL_PERSISTENT_PROCESSES', 'SMS_FINANCIAL_TRANSACTIONS', 'START_VIEW_PERMISSION_USAGE', 'STATUS_BAR', 'SYSTEM_ALERT_WINDOW', 'TRANSMIT_IR', 'UNINSTALL_SHORTCUT', 'UPDATE_DEVICE_STATS', 'USE_BIOMETRIC', 'USE_FINGERPRINT', 'USE_FULL_SCREEN_INTENT', 'USE_SIP', 'VIBRATE', 'WAKE_LOCK', 'WRITE_APN_SETTINGS', 'WRITE_CALENDAR', 'WRITE_CALL_LOG', 'WRITE_CONTACTS', 'WRITE_EXTERNAL_STORAGE', 'WRITE_GSERVICES', 'WRITE_SECURE_SETTINGS', 'WRITE_SETTINGS', 'WRITE_SYNC_SETTINGS', 'WRITE_VOICEMAIL', 'Malware']


    for p in permission_features:
        if p in permissions:
            sample.append(1)
        else:
            sample.append(0)

    sample = np.array([sample])

    dt_prediction = clf_dt.predict(sample)
    knn_prediction = clf_knn.predict(sample)
    rf_prediction = clf_rf.predict(sample)
    svm_prediction = clf_svm.predict(sample)

    return dt_prediction, knn_prediction, rf_prediction, svm_prediction



#signature-based

api_key = '8a32e4998289a927f41c2da0d4160b558e71c37211a39301297d4562e40a9661'

import requests

def check_apk_malware(api_key, apk_file):
    url = 'https://www.virustotal.com/vtapi/v2/file/scan'
    params = {'apikey': api_key}

    with open(apk_file, 'rb') as file:
        files = {'file': file}
        response = requests.post(url, files=files, params=params)

    if response.status_code == 200:
        scan_id = response.json()['scan_id']
        report_url = f"https://www.virustotal.com/vtapi/v2/file/report?apikey={api_key}&resource={scan_id}"
        report_response = requests.get(report_url).json()

        if report_response['response_code'] == 1:
            if report_response['positives'] > 0:
                return True  # Malware detected
            else:
                return False  # Not detected as malware
        else:
            return None  # Scan not completed yet
    else:
        return None  # Error occurred during the scan
    

# Streamlit app
st.title('Malware Detection')
st.subheader('Choose Detection Method')

option = st.radio(
    'Method:',
    ('Machine Learning', 'VirusTotal API')
)

if option == 'Machine Learning':
    st.subheader('Upload APK File')
    apk_file = st.file_uploader('Upload APK file', type=['apk'])

    if apk_file is not None:
        permissions = extract_permissions(apk_file)
        st.write('Permissions:', permissions)

        dt_prediction, knn_prediction, rf_prediction, svm_prediction = perm_detect(apk_file)

        st.subheader('Machine Learning Predictions')
        st.write('Decision Tree:', dt_prediction)
        st.write('K-Nearest Neighbors:', knn_prediction)
        st.write('Random Forest:', rf_prediction)
        st.write('Support Vector Machine:', svm_prediction)

else:  # VirusTotal API option
    st.subheader('Upload APK File')
    apk_file = st.file_uploader('Upload APK file', type=['apk'])
    result = check_apk_malware(api_key, apk_file)

    if apk_file is not None:
        response = check_apk_malware(api_key, apk_file)

        if 'scan_id' in response:
            scan_id = response['scan_id']
            st.write("Scan ID:", scan_id)
            st.write("Scan in progress. Please wait for the report.")

            result = check_apk_malware(api_key, apk_file)
            if isinstance(result, str):
                 print("The scan is still in progress. Please try again later.")
        elif result:
                print("The APK file is detected as malware!")
        else:
            print("The APK file is not detected as malware. It seems to be safe!")
    else:
            st.write("An error occurred while scanning the file. Please try again.")






